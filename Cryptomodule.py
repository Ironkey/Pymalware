#_*_ coding: utf-8 _*_
#AES_Block / Crypto.py

import base64
from Crypto import Random
from Crypto.Cipher import AES
import os
import stat

# 블록크기 = 64
# 암호화 진행된 후 한 블럭의 크기 = 88

def encrypt(file, key):
    try:
        print(file)
        pad = 64 - os.path.getsize(file) % 64
        if pad < 10:
            pad = '0' + str(pad)
        else:
            pad = str(pad)
        f = open(file, 'rb')
        n = open(file + '.BlackPink', 'w+b')
        iv = Random.new().read(AES.block_size)
        n.write(pad+iv)
        pad = int(pad)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        while True:
            if os.path.getsize(file) == 0:
                break
            data = f.read(64)
            if data:
                if len(data) != 64:
                    data = data + (pad * "|")
                n.write(base64.b64encode(cipher.encrypt(data)))
            else:
                break
        f.close()
        n.close()
        ReadOnlyDel(file)
        print("Complete")
    except MemoryError, e:
        print("Memory Flow!!" + file)
        f.close()
        n.close()
        os.unlink(file + '.imas')

def decrypt(file, key):
    try:
        print(file)
        f = open(file, "rb")
        n = open(file[:-4], "w+b")
        padiv = f.read(18) # 맨앞의 패드 문자 개수와 iv의 값을 읽어옴. 18인 이유는 문자개수 2자리와 iv 16자리라서 그럼.
        pad = padiv[:2]
        pad = int(pad)
        iv = padiv[2:]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        c1 = f.read(88)
        c2 = f.read(88)
        while True:
            if not c2:
                if not c1:
                    break
                else:
                    data =base64.b64decode(c1)
                    data = cipher.decrypt(data)
                    n.write(data[:-pad])
                    break
            else:
                data = base64.b64decode(c1)
                n.write(cipher.decrypt(data))
                c1 = c2
                c2 = f.read(88)
        f.close()
        n.close()
        ReadOnlyDel(file)
        print("Complete")
    except MemoryError, e:
        print("MemoryError!!", file)
        f.close()
        n.close()
        os.unlink(file[:-4])

def ReadOnlyDel(file):
    os.chmod(file, stat.S_IWRITE)
    os.unlink(file)